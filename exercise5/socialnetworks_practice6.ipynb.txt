{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulating spreading models on networks\n",
    "\n",
    "Today we are going to simulate SI and SIS models on simulated networks. We will write some functions to simulate spreading and compare how network topology influences spreading."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We will store the state of each node in a node attribute called \"state\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G = nx.erdos_renyi_graph(100,.05)\n",
    "G = max(nx.connected_component_subgraphs(G), key=len) #for convenience - only use the giant component\n",
    "intialization={node:'S' for node in G.nodes()} #susceptible\n",
    "nx.set_node_attributes(G,intialization,'state')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now pick a random node to be the first infected node - patient zero! Let's draw the network and highlight the node."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "patient_zero=random.choice(list(G.nodes())) #randomly select a node\n",
    "G.nodes[patient_zero]['state']='I' #change its state to \"I\"- infected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "positions = nx.spring_layout(G)\n",
    "plt.figure(figsize=(5,5))\n",
    "color_map = {}\n",
    "for node in G.nodes():\n",
    "    if G.nodes[node]['state'] =='S':\n",
    "        color_map[node]='green'\n",
    "    else:\n",
    "        color_map[node]='red'\n",
    "nx.draw(G,pos=positions,node_color = color_map.values(),node_size=100)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let us put this initialization into a function for convenience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def initialize_er(n_nodes,p):\n",
    "    G = nx.erdos_renyi_graph(n_nodes,p)\n",
    "    G = max(nx.connected_component_subgraphs(G), key=len) #for convenience - only use the giant component\n",
    "    intialization={node:'S' for node in G.nodes()} #susceptible\n",
    "    nx.set_node_attributes(G,intialization,'state')\n",
    "    patient_zero=random.choice(list(G.nodes())) #randomly select a node\n",
    "    G.nodes[patient_zero]['state']='I' #change its state to \"I\"- infected\n",
    "    positions = nx.spring_layout(G) #set positions\n",
    "    nx.set_node_attributes(G,positions,'positions')\n",
    "    return G"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## And the plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_spreading(network):\n",
    "    plt.figure(figsize=(5,5))\n",
    "    color_map = {}\n",
    "    for node in network.nodes():\n",
    "        if network.nodes[node]['state'] =='S':\n",
    "            color_map[node]='green'\n",
    "        else:\n",
    "            color_map[node]='red'\n",
    "    nx.draw(network,pos=nx.get_node_attributes(network,'positions'),node_color = color_map.values(),node_size=100)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Test:\n",
    "G=initialize_er(100,.05)\n",
    "plot_spreading(G)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1: Write a function for one step of the spreading - each neighbor of an infected node has a probability of becoming infected (beta from the lecture). There are many ways to do this, but here is one outline.\n",
    "\n",
    "- Get a dictionary of the node states (nx.get_node_attributes)\n",
    "- loop over the nodes in the network\n",
    "- if the node if suspectible, loop over its neighbors\n",
    "- for each infected neighbor, \"toss a coin\" using random.random - if it is large than beta, then infect the node.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def spread_infection(network, beta):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test your function in the following code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G=initialize_er(100,.05)\n",
    "for _ in range(5):\n",
    "    plot_spreading(G)\n",
    "    spread_infection(G,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2: Write a function that creates a network and simulates a number of time steps, with probability of infection equal to beta, and returns a list of the percent of infected notes after each step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_epidemic_er(n_nodes,p,steps,beta):\n",
    "    G=initialize_er(n_nodes,p)\n",
    "    pct_infected = [1/n_nodes]\n",
    "    for _ in range(steps):\n",
    "        spread_infection(G,beta)\n",
    "        node_states = nx.get_node_attributes(G,'state')\n",
    "        count_infected = 0\n",
    "        for node in node_states:\n",
    "            if node_states[node]=='I':\n",
    "                count_infected+=1\n",
    "        pct_infected.append(count_infected/n_nodes)\n",
    "    return pct_infected"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test your function with the following plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "for beta in np.linspace(.1,1,10):\n",
    "    plt.plot(simulate_epidemic_er(100,.05,20,beta),label=round(beta,1))\n",
    "plt.legend(title='Beta')\n",
    "plt.ylabel('Pct Infected',size=18)\n",
    "plt.xlabel('Time Step',size=18)\n",
    "plt.xticks(size=18)\n",
    "plt.yticks(size=18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2: Repeat the analysis with a Barabasi-Albert network instead of an Erdos-Renyi network. Use 200 nodes and m = 4. First visualize the spreading by drawing the network with beta = 1, then plot the percent of infected nodes over time for different betas. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def initialize_ba(n_nodes,m):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G=initialize_ba(200,4)\n",
    "for _ in range(5):\n",
    "    plot_spreading(G)\n",
    "    spread_infection(G,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_epidemic_ba(n_nodes,m,steps,beta):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "for beta in np.linspace(.1,1,10):\n",
    "    plt.plot(simulate_epidemic_ba(200,4,20,beta),label=round(beta,1))\n",
    "plt.legend(title='Beta')\n",
    "plt.ylabel('Pct Infected',size=18)\n",
    "plt.xlabel('Time Step',size=18)\n",
    "plt.xticks(size=18)\n",
    "plt.yticks(size=18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Task 3: Repeat the analysis with a stochastic block model with two communities of 100 nodes each, with probability of within community edges = .1, between community edges probability = .001. Hint: use nx.stochastic_block_model and read its description carefully."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nx.stochastic_block_model?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def initialize_sbm(list_of_community_sizes,matrix_probabilities):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G=initialize_sbm([100,100],[[.05,.001],[.001,.05]])\n",
    "for _ in range(10):\n",
    "    plot_spreading(G)\n",
    "    spread_infection(G,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_epidemic_sbm(list_of_community_sizes,matrix_probabilities,steps,beta):\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "for beta in np.linspace(.1,1,10):\n",
    "    plt.plot(simulate_epidemic_sbm([100,100],[[.05,.001],[.001,.05]],20,beta),label=round(beta,1))\n",
    "plt.legend(title='Beta')\n",
    "plt.ylabel('Pct Infected',size=18)\n",
    "plt.xlabel('Time Step',size=18)\n",
    "plt.xticks(size=18)\n",
    "plt.yticks(size=18)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 4: Come up with your own stochastic block model design and repeat the analysis. Here is one idea:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G=initialize_sbm([100,100,100,100],[[.1,.001,0,0],\n",
    "                                [.001,.1,.001,0],\n",
    "                                [0,.001,.1,.001],\n",
    "                                [0,0,.001,.1]])\n",
    "for _ in range(10):\n",
    "    plot_spreading(G)\n",
    "    spread_infection(G,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "for beta in np.linspace(.1,1,10):\n",
    "    plt.plot(simulate_epidemic_sbm([100,100,100,100],\n",
    "                                   [[.1,.001,0,0],\n",
    "                                [.001,.1,.001,0],\n",
    "                                [0,.001,.1,.001],\n",
    "                                [0,0,.001,.1]],20,beta),label=round(beta,1))\n",
    "plt.legend(title='Beta')\n",
    "plt.ylabel('Pct Infected',size=18)\n",
    "plt.xlabel('Time Step',size=18)\n",
    "plt.xticks(size=18)\n",
    "plt.yticks(size=18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 5: Create a new function that spreads an infection with an SIS process. Infected nodes return to being susceptible with probability mu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def spread_infection_SIS(network, beta, mu):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G=initialize_er(100,.05)\n",
    "for _ in range(10):\n",
    "    plot_spreading(G)\n",
    "    spread_infection_SIS(G,1,.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_epidemic_er_SIS(n_nodes,p,steps,beta,mu):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "for beta in np.linspace(.1,1,10):\n",
    "    plt.plot(simulate_epidemic_er_SIS(100,.05,100,beta,.5),label=round(beta,1))\n",
    "plt.legend(title='Beta')\n",
    "plt.ylabel('Pct Infected',size=18)\n",
    "plt.xlabel('Time Step',size=18)\n",
    "plt.xticks(size=18)\n",
    "plt.yticks(size=18)\n",
    "plt.ylim([0,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## For fun, apply the SIS model to your favorite network: BA, Small World, SBM, ...."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
